import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

public class TetrisField extends JPanel {
    private final int ROWS = 20; // フィールドの行数
    private final int COLS = 10; // フィールドの列数
    private final int CELL_SIZE = 30; // セルのサイズ（ピクセル単位）

    private Tetromino currentTetromino; // 現在のテトリミノ

    public TetrisField() {
        setPreferredSize(new Dimension(COLS * CELL_SIZE, ROWS * CELL_SIZE)); // パネルの推奨サイズを設定
        setBackground(Color.BLACK); // 背景色を黒に設定
        int startCol = (COLS / 2) - 1; // 初期位置を中央に設定
        currentTetromino = new Tetromino(0, 0, startCol); // 初期テトリミノを作成

        setFocusable(true); // キーボード入力を受け取るためにフォーカスを設定
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_LEFT:
                        currentTetromino.moveLeft(); // 左に移動
                        repaint(); // 再描画
                        break;
                    case KeyEvent.VK_RIGHT:
                        currentTetromino.moveRight(); // 右に移動
                        repaint(); // 再描画
                        break;
                }
            }
        });
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); // 親クラスの描画処理を呼び出し
        g.setColor(Color.GRAY); // 描画色を灰色に設定
        
        // フィールドのグリッドを描画
        for (int row = 0; row < ROWS; row++) {
            for (int col = 0; col < COLS; col++) {
                g.drawRect(col * CELL_SIZE, row * CELL_SIZE, CELL_SIZE, CELL_SIZE); // 矩形を描画
            }
        }

        // 現在のテトリミノを描画
        g.setColor(currentTetromino.getColor()); // テトリミノの色を設定
        int[][] shape = currentTetromino.getShape(); // テトリミノの形状を取得
        int rowOffset = currentTetromino.getRow(); // テトリミノの行オフセットを取得
        int colOffset = currentTetromino.getCol(); // テトリミノの列オフセットを取得
        for (int row = 0; row < shape.length; row++) {
            for (int col = 0; col < shape[row].length; col++) {
                if (shape[row][col] == 1) { // テトリミノのブロックがある部分を描画
                    g.fillRect((colOffset + col) * CELL_SIZE, (rowOffset + row) * CELL_SIZE, CELL_SIZE, CELL_SIZE);
                }
            }
        }
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Tetris Field"); // 新しいJFrameを作成し、タイトルを設定
        TetrisField field = new TetrisField(); // TetrisFieldのインスタンスを作成
        frame.add(field); // フィールドをフレームに追加
        frame.pack(); // フレームのサイズを内容に合わせて調整
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // フレームを閉じたときにアプリケーションを終了
        frame.setLocationRelativeTo(null); // フレームを画面中央に表示
        frame.setVisible(true); // フレームを表示
    }
}