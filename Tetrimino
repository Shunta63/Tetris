import java.awt.*;
import java.util.Random;

public class Tetromino {
    private int[][] shape; // テトリミノの形状
    private int row; // テトリミノの行位置
    private int col; // テトリミノの列位置
    private Color color; // テトリミノの色

    // テトリミノの形状定義
    private static final int[][][] SHAPES = {
        {{1, 1, 1, 1}}, // I型
        {{1, 1, 1}, {0, 1, 0}}, // T型
        {{1, 1, 0}, {0, 1, 1}}, // Z型
        {{0, 1, 1}, {1, 1, 0}}, // S型
        {{1, 1}, {1, 1}}, // O型
        {{1, 1, 1}, {1, 0, 0}}, // L型
        {{1, 1, 1}, {0, 0, 1}} // J型
    };

    // テトリミノの色定義
    private static final Color[] COLORS = {
        Color.CYAN, Color.MAGENTA, Color.RED, Color.GREEN, Color.YELLOW, Color.ORANGE, Color.BLUE
    };

    public Tetromino(int shapeIndex, int startRow, int startCol) {
        this.shape = SHAPES[shapeIndex];
        this.row = startRow;
        this.col = startCol;
        this.color = COLORS[shapeIndex];
    }

    public static Tetromino createRandomTetromino(int startRow, int startCol) {
        Random random = new Random();
        int shapeIndex = random.nextInt(SHAPES.length);
        return new Tetromino(shapeIndex, startRow, startCol);
    }

    public int[][] getShape() {
        return shape;
    }

    public int getRow() {
        return row;
    }

    public int getCol() {
        return col;
    }

    public Color getColor() {
        return color;
    }

    public void setPosition(int row, int col) {
        this.row = row;
        this.col = col;
    }

    public void moveLeft() {
        if (canMove(col - 1)) {
            this.col--;
        }
    }

    public void moveRight() {
        if (canMove(col + 1)) {
            this.col++;
        }
    }

    private boolean canMove(int newCol) {
        // 新しい位置がフィールドの左右の境界内にあるかを確認
        for (int row = 0; row < shape.length; row++) {
            for (int col = 0; col < shape[row].length; col++) {
                if (shape[row][col] == 1) {
                    if (newCol + col < 0 || newCol + col >= 10) { // フィールドの境界チェック
                        return false;
                    }
                }
            }
        }
        return true;
    }
}